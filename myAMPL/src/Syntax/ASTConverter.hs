module Skelgrammar where
import qualified TypesAMPL as T 
-- Haskell module generated by the BNF converter

import Absgrammar
import ErrM
type Result = Err String

--failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent x = case x of
  Ident str  -> str 


transUIdent x = case x of
  UIdent str  -> str 


transAMPLCODE x = case x of
  Main handles cohandles constructors destructors processes functions start  -> T.AMPLcode 
                                                                                  (transHANDLES handles)
                                                                                  (transCOHANDLES cohandles)
                                                                                  (transCONSTRUCTORS constructors)
                                                                                  (transDESTRUCTORS destructors)
                                                                                  (transPROCESSES processes)
                                                                                  (transFUNCTIONS functions)
                                                                                  (transSTART start)


transHANDLE_SPEC x = case x of
  Hand_spec uident handles  -> T.Handle_spec(transUIdent uident) (map transHandle handles)

transHandle x = case x of
  HandName uident  -> (transUIdent uident)


transCONSTRUCTORS x = case x of
  Constructors structor_specs  -> map transSTRUCTOR_SPEC structor_specs
  Constructors_none  -> []


transDESTRUCTORS x = case x of
  Destructors structor_specs  -> map transSTRUCTOR_SPEC structor_specs
  Destructors_none  -> []


transSTRUCTOR_SPEC x = case x of
  Struct_spec uident structs  -> T.Struct_spec (transUIdent uident) (map transSTRUCT structs)


transSTRUCT x = case x of
  Struct uident n  -> (transUIdent uident , fromIntegral n)


transHANDLES x = case x of
  Handles handle_specs  -> map transHANDLE_SPEC handle_specs
  Handles_none          -> []


transCOHANDLES x = case x of
  Cohandles handle_specs  -> map transHANDLE_SPEC handle_specs
  Cohandles_none          -> []


transPROCESSES x = case x of
  Processes process_specs  -> map transPROCESSES process_specs
  Processes_none  -> []


transPROCESS_SPEC x = case x of
  Process_spec uident varss ids1 ids2 coms3  -> ((transUIdent uident), (map transVars varss),(map transIdent ids1),
                                                 (map transIdent ids1),(map transIdent ids2),(transCOMS coms3))


transVars x = case x of
  VName id  -> (transUIdent id)


transFUNCTIONS x = case x of
  Functions function_specs  -> map transFUNCTION_SPEC function_specs
  Functions_none  -> []


transFUNCTION_SPEC x = case x of
  Function_spec uident varss coms  -> (transUIdent uident,(map transVars varss),(transCOMS coms))


transSTART x = case x of
  Start channel_spec coms  -> ((transCHANNEL_SPEC channel_spec),(transCOMS coms))


transCHANNEL_SPEC x = case x of
  Channel_specf ids1 ids2  -> T.Channel_specf (map transIdent ids1) (map transIdent ids2)
  Channel_spec cintegers1 cintegers2  -> T.Channel_spec (transCInteger cintegers1) (transCInteger cintegers1)


transCOMS x = case x of
  Prog coms  -> (map transCOM coms)


transCOM x = case x of
  AC_STORE  -> T.AC_STORE
  AC_STOREf id  -> T.AC_STOREf (transIdent id)
  AC_LOAD n  -> T.AC_LOAD (fromIntegral n) 
  AC_LOADf id  -> T.AC_LOADf (transIdent id)
  AC_RET  -> T.AC_RET
  AC_FRET  -> T.AC_FRET
  AC_CALL id  -> T.AC_CALL $ transIdent x
  AC_CALLf id ids  -> T.AC_CALLf (transIdent id) (map transIdent ids)
  AC_INT cinteger  -> T.AC_INT $ transCInteger cinteger
  AC_LEQ  -> T.AC_LEQ
  AC_ADD  -> T.AC_ADD
  AC_MUL  -> T.AC_MUL
  AC_CONS n1 n2  -> T.AC_CONS (fromIntegral n1) (fromIntegral n2)
  {- 
  AC_STRUCT uident1 uident2  -> failure x
  AC_STRUCTas uident1 uident2 ids3  -> failure x
  AC_CASE comss  -> failure x
  AC_CASEf labelcomss  -> failure x
  AC_RECORD comss  -> failure x
  AC_RECORDf labelcomss  -> failure x
  AC_DEST n1 n2  -> failure x
  AC_GET cinteger  -> failure x
  AC_GETf id  -> failure x
  AC_HPUT cinteger n  -> failure x
  AC_HPUTf id uident1 uident2  -> failure x
  AC_HCASE cinteger comss  -> failure x
  AC_HCASEf id labelcomss  -> failure x
  AC_PUT cinteger  -> failure x
  AC_PUTf id  -> failure x
  AC_SPLIT cinteger1 cinteger2 cinteger3  -> failure x
  AC_SPLITf id1 id2 id3  -> failure x
  AC_FORK cinteger1 cinteger2 cintegers3 coms4 cinteger5 cintegers6 coms7  -> failure x
  AC_FORKf id1 id2 ids3 coms4 id5 ids6 coms7  -> failure x
  AC_PLUG ncintegers cintegers1 coms2 cintegers3 coms4  -> failure x
  AC_PLUGf nidents ids1 coms2 ids3 coms4  -> failure x
  AC_RUN trans uident  -> failure x
  AC_RUNf uident ids1 ids2 ids3  -> failure x
  AC_CLOSE cinteger  -> failure x
  AC_CLOSEf id  -> failure x
  AC_HALT cinteger  -> failure x
  AC_HALTf id  -> failure x
  -}

transLABELCOMS x = case x of
  Labelcoms uident1 uident2 coms3  -> failure x


transTRAN x = case x of
  TranIn n1 n2  -> failure x


transNCInteger x = case x of
  Ncinteger cinteger  -> failure x


transNIdent x = case x of
  Nident id  -> failure x


transCInteger x = case x of
  Positive n  -> failure x
  Negative n  -> failure x



